# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18GVBNDovCcBTmWYzY_V5iiKb4GR4v56o
"""

import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import numpy as np
import pandas as pd
import os
import glob
import cv2
import re

ground_truth_path = '/content/BBox_List_2017.csv'
ground_truth_list = pd.read_csv(ground_truth_path)
ground_truth_list = ground_truth_list[ground_truth_list.columns[:-3]]
ground_truth_list['x'] = ground_truth_list['Bbox [x'].copy()
ground_truth_list['h'] = ground_truth_list['h]'].copy()
ground_truth_list['finding'] = ground_truth_list['Finding Label'].copy()
ground_truth_list['image'] = ground_truth_list['Image Index'].copy()

ground_truth_list.drop(['Bbox [x'], axis=1, inplace=True)
ground_truth_list.drop(['h]'], axis=1, inplace=True)
ground_truth_list.drop(['Finding Label'], axis=1, inplace=True)
ground_truth_list.drop(['Image Index'], axis=1, inplace=True)

ground_truth_list = ground_truth_list[['image', 'finding','x','y','w','h']]

ground_truth_list.head()
#ground_truth_df = ground_truth_list[ground_truth_list['finding'] == 'Atelectasis']  #find the ground_truth(s) of particular disease

def large_to_small(x1, y1, w1, h1, cropped = True): # convert 1024x1024 to 224x224 (which is center-cropped from 256x256) 
    x2 = x1 / 4
    y2 = y1 / 4
    w2 = w1 / 4
    h2 = h1 / 4
    if cropped:
        if x2 < 16:
            x2 = 0
            w2 = w2 - 16
        else:
            x2 = x2 - 16
        if x2 + w2 > 224:
            w2 = 224 - x2
        if y2 < 16:
            y2 = 0
            h2 = h2 - 16
        else:
            y2 = y2 - 16
        if y2 + h2 > 224:
            h2 = 224 - y2
    return int(x2), int(y2), int(w2), int(h2)

pred_bbox_path = '/content/Densenet_bbox_list.txt'

with open(pred_bbox_path, "r") as f:
  pred_bbox_list = [i.strip() for i in f.readlines()]

pred_bbox = []
for line in pred_bbox_list:
  line = re.split(',',line)
  #if line[1] == 'Atelectasis':  #find pred boxes of particular disease
  pred_bbox.append(line)

x = 2
y = 3
w = 4
h = 5

def IOU(xywh1, xywh2): # intersection over union for two bounding boxes
    x1, y1, w1, h1 = xywh1
    x2, y2, w2, h2 = xywh2
    
    dx = min(x1+w1, x2+w2) - max(x1, x2)
    dy = min(y1+h1, y2+h2) - max(y1, y2)
    intersection = dx * dy if (dx >=0 and dy >= 0) else 0.
    
    union = w1 * h1 + w2 * h2 - intersection
    return (intersection / union)

ious = []

for i in range(len(ground_truth_list)):
  gt_x = ground_truth_list.iloc[i]['x'] #ground truths, convert to ground_truth_df if particular disease is choosen 
  gt_y = ground_truth_list.iloc[i]['y']
  gt_w = ground_truth_list.iloc[i]['w']
  gt_h = ground_truth_list.iloc[i]['h']

  sm_x, sm_y, sm_w, sm_h = large_to_small(gt_x, gt_y, gt_w, gt_h, cropped = True)
  
  pr_x = int(pred_bbox[i][x])
  pr_y = int(pred_bbox[i][y])
  pr_w = int(pred_bbox[i][w])
  pr_h = int(pred_bbox[i][h])

  iou = IOU((pr_x, pr_y, pr_w, pr_h), (sm_x, sm_y, sm_w, sm_h))

  ious.append(iou)

ious = np.array([ious]).squeeze()
print("mean IOU: " + str(ious.mean()))